#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definición de constantes
#define MAX_LINE_LENGTH 10024
#define MAX_FIELDS 10

// Estructura para almacenar la información del usuario
struct Usuario {
    char nombre[50];
    char email[50];
    char facultad[50];
    int edad;
};

// Lista para almacenar los usuarios
struct Usuario Usuario[100];  // Se asume un límite máximo de 100 usuarios, puedes ajustarlo según sea necesario
int numUsuarios = 0;  // Número actual de usuarios en la lista

///////////////////////////////////////////// Lista ///////////////////////////////////////////////////////////////

//Estructura de la lista
struct Nodo {
    int dato;
    struct Nodo* siguiente;
    struct Nodo* anterior;
};

struct Nodo* cabeza = NULL;

// Función para imprimir la lista de adelante hacia atrás
void consultarUsuariosEnListaAdelante(struct Nodo* cabeza) {
    struct Nodo* actual = cabeza;
    printf("Lista de adelante hacia atrás: ");
    while (actual != NULL) {
        printf("%d -> ", actual->dato);
        actual = actual->siguiente;
    }
    printf("NULL\n");
}

// Función para imprimir la lista de atrás hacia adelante
void consultarUsuariosEnListaAtras(struct Nodo* cabeza) {
    struct Nodo* actual = cabeza;
    if (actual == NULL) {
        printf("La lista está vacía.\n");
        return;
    }

    while (actual->siguiente != NULL) {
        actual = actual->siguiente;
    }

    printf("Lista de atrás hacia adelante: NULL ");
    while (actual != NULL) {
        printf("-> %d ", actual->dato);
        actual = actual->anterior;
    }
    printf("\n");
}

// Función para agregar un usuario a la lista de usuarios en memoria.
void agregarUsuarioEnLista(char *nombre, char *email, char *facultad, int edad) {
    // Verificar si hay espacio disponible en la lista
    if (numUsuarios < 100) {
        // Crear un nuevo nodo para el usuario
        struct Nodo* nuevoNodo = (struct Nodo*)malloc(sizeof(struct Nodo));
        nuevoNodo->dato = numUsuarios;
        nuevoNodo->siguiente = NULL;
        nuevoNodo->anterior = NULL;

        // Crear un nuevo usuario
        struct Usuario nuevoUsuario;
        strcpy(nuevoUsuario.nombre, nombre);
        strcpy(nuevoUsuario.email, email);
        strcpy(nuevoUsuario.facultad, facultad);
        nuevoUsuario.edad = edad;

        // Agregar el nuevo usuario a la lista
        Usuario[numUsuarios] = nuevoUsuario;
        numUsuarios++;

        // Agregar el nuevo nodo a la lista de nodos
        if (cabeza == NULL) {
            cabeza = nuevoNodo;
        } else {
            nuevoNodo->siguiente = cabeza;
            cabeza->anterior = nuevoNodo;
            cabeza = nuevoNodo;
        }
    } else {
        printf("La lista de usuarios está llena.\n");
    }
}

///////////////////////////////////////////// Grafo ///////////////////////////////////////////////////////////////

// Estructura para representar un nodo en el grafo
struct NodoGrafo {
    struct Usuario* usuario;
    struct NodoGrafo* siguiente;
};

// Función para agregar un nodo al grafo
void agregarNodoGrafo(struct NodoGrafo** cabeza, struct Usuario* usuario) {
    struct NodoGrafo* nuevoNodo = (struct NodoGrafo*)malloc(sizeof(struct NodoGrafo));
    nuevoNodo->usuario = usuario;
    nuevoNodo->siguiente = *cabeza;
    *cabeza = nuevoNodo;
}

	// Función para agregar una conexión entre nodos basada en la edad y la facultad
	void agregarConexion(struct NodoGrafo* nodo1, struct NodoGrafo* nodo2) {
		// Lógica para decidir si agregar una conexión
		if (nodo1->usuario->edad < 25 && nodo2->usuario->edad < 25 && strcmp(nodo1->usuario->facultad, nodo2->usuario->facultad) == 0) {
			// Agregar conexión
			printf("Conexión agregada entre %s y %s\n", nodo1->usuario->nombre, nodo2->usuario->nombre);
		} else {
			// No hay conexión
			printf("No se agregó conexión entre %s y %s\n", nodo1->usuario->nombre, nodo2->usuario->nombre);
		}
	}

///////////////////////////////////////////// Árbol Binario ///////////////////////////////////////////////////////////////


struct NodoArbol* arbolEdades = NULL;


struct NodoArbol {
    int dato;
    struct NodoArbol* izquierda;
    struct NodoArbol* derecha;
};

// Función para crear un nuevo nodo
struct NodoArbol* crearNodo(int valor) {
    struct NodoArbol* nuevoNodo = (struct NodoArbol*)malloc(sizeof(struct NodoArbol));
    nuevoNodo->dato = valor;
    nuevoNodo->izquierda = nuevoNodo->derecha = NULL;
    return nuevoNodo;
}

// Función para insertar un nuevo nodo en el árbol
struct NodoArbol* insertar(struct NodoArbol* arbolEdades, int valor) {
    // Si la raíz es NULL, se crea un nuevo nodo
    if (arbolEdades == NULL) {
        return crearNodo(valor);
    }

    // Si el valor es menor que el valor de la raíz, se inserta en el subárbol izquierdo
    if (valor < arbolEdades->dato) {
        arbolEdades->izquierda = insertar(arbolEdades->izquierda, valor);
    }
    // Si el valor es mayor que el valor de la raíz, se inserta en el subárbol derecho
    else if (valor > arbolEdades->dato) {
        arbolEdades->derecha = insertar(arbolEdades->derecha, valor);
    }

    // Si el valor ya existe en el árbol, no se hace nada (no se permiten duplicados)

    return arbolEdades;
}

// Función para realizar un recorrido inorden (inorder traversal) del árbol
void inorden(struct NodoArbol* arbolEdades) {
    if (arbolEdades != NULL) {
        inorden(arbolEdades->izquierda);
        printf("%d ", arbolEdades->dato);
        inorden(arbolEdades->derecha);
    }
}

int main(void) {

	struct NodoGrafo* grafo = NULL;
	struct Nodo* cabeza = NULL;

    // Ejemplo de cómo agregar nodos al grafo
    agregarNodoGrafo(&grafo, &Usuario[0]);
    agregarNodoGrafo(&grafo, &Usuario[1]);
    agregarNodoGrafo(&grafo, &Usuario[2]);

    // Ejemplo de cómo agregar conexiones al grafo
    agregarConexion(grafo, grafo->siguiente);
    agregarConexion(grafo->siguiente, grafo->siguiente->siguiente);


//varibles globales: horarios y precios

	const char *globalMaturino[]= {"11:00", "11:15", "11:30", "11:45"};
	const char *globalVespertino[]= {"12:00", "12:15", "12:30", "12:45", "13:00", "13:15", "13:35", "13:45", "14:00", "14:10", "14:20", "14:40", "14:45", "15:00", "15:10", "15:20", "15:30", "15:45", "16:00", "16:10", "16:20", "16:30", "16:40", "16:50", "17:00", "17:10", "17:20", "17:30", "17:40", "17:50", "18:00", "18:10", "18:20", "18:30", "18:40", "18:50", "19:00", "19:10", "19:20", "19:30", "19:40", "19:50"};
	const char *globalNocturno[]= {"20:00", "20:10", "20:20", "20:30", "20:45", "21:00", "21:15", "21:30", "21:45", "22:00", "22:20"};
	
	const int globalPrecio_0= 22;	//Se repite:1 En la ruta:Xochimilco
	const int globalPrecio_1= 32;	//Se repite:3 En la ruta:Tulyehualco,Tlahuac,Milpa Alta
	const int globalPrecio_2= 34;	//Se repite:2 En la ruta:Mixquic, San pablo
	const int globalPrecio_3= 45;	//Se repite:1 En la ruta:Chalco
	const int globalPrecio_4= 30;	//Se repite:1 En la ruta:San Mateo
    
//Declarión de variables
    
  char nombre[50];
  char email[50];
  char facultad[50];
  int edad ;
  int opcion;
  int selec;
  
//menú para seleccionar registro o iniciar con la consulta de los pumabuses foraneos

    do {
        printf("\n¡Bienvenido a Puma Foraneo!\n");
        printf("Seleccione una opción:\n");
        printf("1) Registro\n");
        printf("2) Inicio\n");
        printf("3) Consultar lista\n");
		printf("4) Grafo\n");
		printf("5) Árbol Binario\n");
        printf("6) Terminar\n");
        scanf("%d", &opcion);
   				 	switch(opcion){
            

case 1:
                printf("\nIntroduce tu nombre de usuario:\n");
                scanf("%s", nombre);

                printf("\nIntroduce el email del usuario:\n");
                scanf("%s", email);

                printf("\nIntroduce tu Facultad:\n");
                scanf("%s", facultad);

                printf("\nIntroduce tu edad:\n");
                scanf("%d", &edad);

                agregarUsuarioEnLista(nombre, email, facultad, edad);
                break;

// Agregar el nuevo usuario a la lista
    struct Usuario nuevoUsuario;
Usuario[numUsuarios] = nuevoUsuario;
numUsuarios++;

// Agregar el nuevo nodo a la lista de nodos
if (cabeza == NULL) {
    cabeza = nuevoNodo;
} else {
    nuevoNodo->siguiente = cabeza;
    cabeza->anterior = nuevoNodo;
    cabeza = nuevoNodo;
}

// Agregar la edad al árbol
arbolEdades = insertar(arbolEdades, edad);


//menu donde muestra las rutas del pumabus Foraneo
//Selecciona una opción y lo dirige al usuario a su opcion seleccionada
//Puede seleccionar el horario que desee consultar.
//Con la ruta seleccionada podra consultar los siguentes datos: precio, horario que seleccione el usuario

case 2:
				do{
			printf("\nMenu Principal\n");  
			printf("\nSelecciona la ruta\n1)CU a Xochimilco \n2)CU a Deportiva Sta.Cruz \n3)CU a Tulyehualco \n4)CU a Tlahuac \n5)CU a Milpa Alta \n6)CU a Mixquic \n7)CU A Chalco \n8)CU a San Pablo \n9)CU a San Bartolo \n10)CU a San Mateo\n");
			printf("\nSelecciona una opcion:\n"); 
				scanf("%d",&opcion);

                switch(opcion){
 

case 1:
      printf("\nSeleccionaste:CU a Xochimilco \n"); 
       system("clear"); { 
        do {
	   	printf("\nQue  horario desea saber?:\n1)Matutino \n2)Vespertino \n3)Nocturno \n4)Terminar\n\n");
	   		scanf("%i",&selec);
	   		system("clear");
	   			switch(selec){
	
  	case 1:
		  printf("Costo:$%d\n", globalPrecio_0);
		  printf("\nHorarios \n");
			printf("1)%s \n2)%s \n3)%s \n4)%s \n", globalMaturino[0], globalMaturino[1], globalMaturino[2], globalMaturino[3]);
		    	break;
      
		case 2:
			printf("Costo:$%d\n", globalPrecio_0);
			printf("\nHorarios: \n");
			printf("1)%s \n2)%s \n3)%s \n4)%s \n5)%s \n6)%s \n7)%s \n8)%s \n9)%s \n10)%s \n11)%s \n12)%s \n13)%s \n14)%s \n15)%s \n16)%s \n17)%s \n18)%s \n19)%s \n20)%s \n21)%s \n22)%s \n23)%s \n24)%s \n25)%s \n26)%s \n27)%s \n28)%s \n29)%s \n30)%s \n31)%s \n32)%s \n33)%s \n34)%s \n35)%s \n36)%s \n37)%s \n38)%s \n", globalVespertino[0], globalVespertino[1], globalVespertino[2], globalVespertino[3], globalVespertino[4], globalVespertino[6], globalVespertino[7], globalVespertino[8], globalVespertino[9], globalVespertino[10], globalVespertino[11], globalVespertino[12], globalVespertino[13], globalVespertino[14], globalVespertino[15], globalVespertino[16], globalVespertino[17], globalVespertino[18], globalVespertino[19], globalVespertino[20], globalVespertino[21], globalVespertino[22], globalVespertino[23], globalVespertino[24], globalVespertino[25], globalVespertino[26], globalVespertino[27], globalVespertino[28], globalVespertino[29], globalVespertino[30], globalVespertino[31], globalVespertino[32], globalVespertino[33], globalVespertino[34], globalVespertino[35], globalVespertino[36], globalVespertino[37], globalVespertino[38]);
					break;
      
		case 3:
			printf("Costo:$%d\n", globalPrecio_0);
			printf("Horarios: \n");
			printf("1)%s \n2)%s \n3)%s \n4)%s \n5)%s \n6)%s \n7)%s \n8)%s \n9)%s \n10)%s \n", globalNocturno[1], globalNocturno[2], globalNocturno[3], globalNocturno[4], globalNocturno[5], globalNocturno[6], globalNocturno[7], globalNocturno[8], globalNocturno[9], globalNocturno[10]);
					break;
      
		case 4:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
					break;
		}
	}while(selec!=4);
	return 0;
}
					break;


case 2:
			printf("\nSeleccionaste:CU a Deportiva Sta.Cruz \n");
				system("clear"); {
					do{
			printf("Que horario desea saber?:\n1)Vespertino \n2)Nocturno \n3)Terminar\n");
				scanf("%i",&selec);
				system("cls");
				switch(selec){
		
    case 1:
				printf("Costo %d", globalPrecio_2);
				printf("Horarios \n");
				printf("1)%s \n2)%s \n3)%s \n", globalVespertino[5], globalVespertino[9], globalVespertino[39]);
					break;
      
		case 2:
				printf("Costo %d", globalPrecio_2);
				printf("Horarios \n");
				printf("1)%s \n2)%s \n", globalNocturno[3], globalNocturno[7]);
					break;
      
		case 3:
				printf("Gracias Por Usar Puma Foraneo 7u7 \n");
					break;
		}

	}while(selec!=3);
	return 0;
}


case 3:
			printf("\nSeleccionaste:CU a Tulyehualco \n");
				system("clear"); {
					do{
      
			printf(" Qu  horario desea saber?:\n1)Vespertino \n2)Nocturno \n3)Terminar\n");
				scanf("%i",&selec);
				system("cls");
				switch(selec){
        
		case 1:
			printf("Costo:$%d\n", globalPrecio_1);
			printf("Horarios \n");
			printf("1)%s \n2)%s \n3)%s \n4)%s \n", globalVespertino[5], globalVespertino[12], globalVespertino[16], globalVespertino[35]);
				break;
      
		case 2:
			printf("Costo:$%d\n", globalPrecio_1);
			printf("Horarios \n");
			printf("1)%s \n2)%s \n", globalNocturno[5], globalNocturno[9]);
				break;
      
		case 3:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		}

	}while(selec!=3);
	return 0;
}


case 4:
			printf("\nSeleccionaste:CU a Tlahuac \n");
				system("clear"); {
				do{
        
			printf(" Que  horario desea saber?:\n1)Vespertino \n2)Nocturno \n3)Terminar\n");
				scanf("%i",&selec);
				system("clear");
				switch(selec){
	
  	case 1:
			printf("Costo:$%d\n", globalPrecio_1 );
			printf("Horarios \n");
			printf("1)%s \n2)%s \n", globalVespertino[5], globalVespertino[14]);
				break;
      
		case 2:
			printf("Costo:$%d\n", globalPrecio_1 );
			printf("Horarios \n");
			printf("1)%s \n2)%s \n", globalNocturno[3], globalNocturno[9]);
				break;
      
		case 3:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		}

	}while(selec!=3);
	return 0;
}


case 5:
			printf("\nSeleccionaste:CU a Milpa Alta \n");
				system("clear"); {
				do{

			printf("\nQue  horario desea saber?:\n1)Vespertino \n2)Nocturno \n3)Terminar\n");
				scanf("%i",&selec);
				system("clear");
				switch(selec){

		case 1:
			printf("Costo:$%d\n", globalPrecio_1 );
			printf("Horarios \n");
			printf("1)%s \n2)%s \n3)%s \n", globalVespertino[9], globalVespertino[15], globalVespertino[39]);
				break;
      
		case 2:
			printf("Costo:$%d\n", globalPrecio_1 );
			printf("Horarios \n");
			printf("1)%s \n2)%s \n", globalNocturno[3], globalNocturno[7]);
				break;
      
		case 3:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		}

	}while(selec!=3);
	return 0;
  
}


case 6:
			printf("\nSeleccionaste:CU a Mixquic \n");
				system("clear"); {
				do{
			printf(" \nQue  horario desea saber?:\n1)Nocturno \n2)Terminar\n");
				scanf("%i",&selec);
				system("clear");
				switch(selec){
        
		case 1:
			printf("Costo:$%d\n", globalPrecio_2);
			printf("Horarios \n");
			printf("1)%s \n", globalNocturno[0]);
				break;
      
		case 2:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
	
		}

	}while(selec!=2);
	return 0;
  
}

case 7:
			printf("\nSeleccionaste:CU A Chalco \n");
				system("clear"); {
				do{
		
    	printf("\nQue horario desea saber?:\n1)Nocturno \n2)Terminar\n");		
				scanf("%i",&selec);
				system("clear");
				switch(selec){
    
		case 1:
			printf("Costo:$%d\n", globalPrecio_3);
			printf("Horarios \n");
			printf("1)%s \n2)%s \n", globalNocturno[3], globalNocturno[10]);
				break;

		case 2:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		
    }

	}while(selec!=2);
	return 0;
  
}


case 8:
		 printf("\nSeleccionaste:CU a San Pablo \n");
		 		system("clear"); {
	   do {
     printf("\nQue  horario desea saber?:\n1)Nocturno \n2)Terminar\n");
				scanf("%i",&selec);
				system("clear");
				switch(selec){
        
		case 1:
			printf("Costo:$%d\n", globalPrecio_2);
			printf("Horarios \n");
			printf("1)%s \n", globalNocturno[9]);
				break;;

		case 2:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		
		}

	}while(selec!=2);
	return 0;
  
}

case 9:
			printf("\nSeleccionaste:CU a San Bartolo \n");
				system("clear"); {
        do{
        
			printf("\nQue  horario desea saber?:\n 1)Nocturno \n2)Terminar\n");
				scanf("%i",&selec);
				system("clear");
		    switch(selec){
        
		case 1:
			printf("Costo:$%d \n", globalPrecio_2);
			printf("Horarios \n");
			printf("1)%s \n", globalNocturno[10]);
				break;
      
		case 2:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
	
		}

	}while(selec!=2);
	return 0;
  
}

case 10:
		printf("\nSeleccionaste:CU a San Mateo \n");
			system("clear"); {
			do{
		
    printf("\nQue  horario desea saber?:\n 1)Nocturno \n2)Terminar\n");
			scanf("%i",&selec);
			system("clear");
			switch(selec) {
      
		case 1:
			printf("Costo:$%d\n",globalPrecio_4);
			printf("Horarios \n");
			printf("1)%s \n", globalNocturno[10]);
				break;
      
		case 2:
			printf("Gracias Por Usar Puma Foraneo 7u7 \n");
				break;
		
		}

	}while(selec!=2);
	return 0;
  
}
}
}while (opcion != 10);

case 3:
                printf("Selecciona una opción:\n");
                printf("1) Consulta adelante\n");
                printf("2) Consulta atrás\n");
                scanf("%d", &opcion);

                switch (opcion) {
                    case 1:
                        consultarUsuariosEnListaAdelante(cabeza);
                        break;

                    case 2:
                        consultarUsuariosEnListaAtras(cabeza);
                        break;

                    default:
                        printf("Opción no válida, ingrese un dato diferente, por favor.\n");
                        break;
                }

                break;

case 4:

 printf("\nSeleccionaste: Consultar Grafo\n");

    // Construir el grafo utilizando la información de los usuarios
    for (int i = 0; i < numUsuarios; ++i) {
        agregarNodoGrafo(&grafo, &Usuario[i]);
    }

    // Agregar conexiones en el grafo basadas en la edad y la facultad
    for (struct NodoGrafo* nodo1 = grafo; nodo1 != NULL; nodo1 = nodo1->siguiente) {
        for (struct NodoGrafo* nodo2 = nodo1->siguiente; nodo2 != NULL; nodo2 = nodo2->siguiente) {
            agregarConexion(nodo1, nodo2);
        }
    }

    // Imprimir el grafo
    printf("\nGrafo de usuarios:\n");
    struct NodoGrafo* current = grafo;
    while (current != NULL) {
        printf("Usuario: %s, Facultad: %s, Edad: %d\n", current->usuario->nombre, current->usuario->facultad, current->usuario->edad);
        printf("Conexiones:\n");
        struct NodoGrafo* conexion = current->siguiente;
        while (conexion != NULL) {
            printf("  -> %s\n", conexion->usuario->nombre);
            conexion = conexion->siguiente;
        }
        printf("\n");
        current = current->siguiente;
    }
    break;

case 5:

    printf("Recorrido Inorden: ");
    inorden(arbolEdades);
    printf("\n");
    break;


case 6:
                printf("\nGracias Por Usar Puma Foraneo 7u7 \n");
                break;

            default:
                printf("Opcion es erronea \n ");
                break;
        
   				 	}
    } while (opcion != 5);

    return 0;

}
